# -*- coding: utf-8 -*-
"""
/***************************************************************************
 PostgisToQGIS
                                 A QGIS plugin
 для домашки
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-07-07
        git sha              : $Format:%H$
        copyright            : (C) 2025 by Anosov S.S.
        email                : sermatrena@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import (
    QgsProject,
    QgsVectorLayer,
    QgsFeature,
    QgsGeometry,
    QgsPointXY,
    QgsWkbTypes,
    QgsFields,
    QgsField
)
from qgis.PyQt.QtCore import QVariant
from PyQt5.QtCore import QByteArray
from qgis.core import QgsGeometry, QgsFeature
from qgis.PyQt.QtCore import QByteArray
import requests
import json
from PyQt5.QtWidgets import QMessageBox


from shapely.geometry import shape



API_BASE = "http://localhost:8000"

class PostgisToQGIS:
    def __init__(self, iface):
        self.iface = iface
        self.action = None


        # Создаёт кнопку на панели инструментов QGIS для запуска синхронизации
    def initGui(self):
        self.action = QAction(QIcon(":/plugins/postgistoqgis/icon.png"), "Синхронизировать геометрию", self.iface.mainWindow())
        self.action.triggered.connect(self.sync)
        self.iface.addToolBarIcon(self.action)

    def unload(self):
        self.iface.removeToolBarIcon(self.action)


        # Основная точка входа — при нажатии на кнопку запускается синхронизация
    def sync(self):
        # Проверка и создание слоёв Points_synced, Lines_synced, Polygons_synced
        self.ensure_layers()
        # Очистка от старых данных
        self.clear_layers()

        # Загрузка с сервера
        try:
            # Получаем список всех объектов с сервера (GET /features)
            resp = requests.get(f"{API_BASE}/features")
            resp.raise_for_status()
            features = resp.json()["features"]
            for f in features:
                self.add_feature_to_layer(f)
        except Exception as e:
            QMessageBox.critical(None, "Ошибка загрузки", str(e))



    # Проверяет наличие необходимых слоёв и создаёт их
    def ensure_layers(self):
        for name, wkb in [("Points_synced", "Point"), ("Lines_synced", "LineString"), ("Polygons_synced", "Polygon")]:
            if not self.layer_exists(name):
                uri = f"{wkb}?crs=EPSG:4326"
                layer = QgsVectorLayer(uri, name, "memory")
                pr = layer.dataProvider()
                pr.addAttributes([
                    QgsField("id", QVariant.Int),
                    QgsField("type", QVariant.String)
                ])
                layer.updateFields()
                QgsProject.instance().addMapLayer(layer)

    def layer_exists(self, name):
        return any(layer.name() == name for layer in QgsProject.instance().mapLayers().values())

    def clear_layers(self):
        for name in ["Points_synced", "Lines_synced", "Polygons_synced"]:
            layer = self.get_layer(name)
            if layer:
                layer.startEditing()
                layer.dataProvider().truncate()
                layer.commitChanges()

    def get_layer(self, name):
        for layer in QgsProject.instance().mapLayers().values():
            if layer.name() == name:
                return layer
        return None



    # Добавляет объекты в векторные слои QGIS
    def add_feature_to_layer(self, feature):
        geom_type = feature["geometry"]["type"]

        # Используем shapely для конвертации GeoJSON → WKT
        shapely_geom = shape(feature["geometry"])
        wkt = shapely_geom.wkt
        geom = QgsGeometry.fromWkt(wkt)

        props = feature["properties"]
        id_val = props["id"]

        layer_name = {
            "Point": "Points_synced",
            "LineString": "Lines_synced",
            "Polygon": "Polygons_synced"
        }.get(geom_type)

        layer = self.get_layer(layer_name)
        if layer and geom.isGeosValid():
            f = QgsFeature()
            f.setGeometry(geom)
            f.setAttributes([id_val, geom_type])
            layer.startEditing()
            layer.addFeature(f)
            layer.commitChanges()
